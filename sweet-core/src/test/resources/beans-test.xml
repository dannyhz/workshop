<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans classpath:xsd/spring-beans-4.1.xsd
	http://www.springframework.org/schema/context classpath:xsd/spring-context-4.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 开启aspectj注解切面（@Aspect） -->
    <aop:aspectj-autoproxy/>

    <!-- 使用SpringContextHolder.getBean('xxxx')的静态方法得到bean对象 -->
    <bean class="cn.evun.sweet.core.spring.SpringContext" lazy-init="false"/>

    <!-- 高效序列化和反序列化框架FST实例 -->
    <bean id="fstRedisSerializer" class="cn.evun.sweet.core.cache.redis.FSTRedisSerializer"/>

    <!-- 使用SpringContextHolder.getBean('xxxx')的静态方法得到bean对象 -->
    <bean class="cn.evun.sweet.core.spring.SpringContext" lazy-init="false"/>

    <!-- 开启注解bean自动检测并装配,注解扫描范围 -->
    <context:component-scan base-package="cn.evun.sweet.core.mongodb,cn.evun.sweet.core.ons,cn.evun.sweet.core.test,cn.evun.sweet.core.service,
        cn.evun.sweet.core.sms,cn.evun.sweet.core.cache,cn.evun.sweet.core.hystrix,cn.evun.sweet.core.datafiltering">
    </context:component-scan>

    <!-- 启用bean的${}功能 -->
    <context:property-placeholder location="classpath*:conf/test-config.properties"/>

    <!-- Ehcache配置 -->
    <bean id="ehcacheManagerFactory" class="cn.evun.sweet.core.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:conf/ehcache.xml"/>
    </bean>
    <bean id="ehcacheCacheManager" class="cn.evun.sweet.core.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManagerFactory"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jeidsConnectionFactory"/>
        <property name="enableTransactionSupport" value="false"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="defaultSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>
    <bean id="jeidsConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg ref="redisSentinelConfig"/>
        <property name="database" value="${redis.dbIndex}"/>
        <property name="password" value="${redis.password}"/>
    </bean>
    <bean id="redisSentinelConfig" class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <constructor-arg name="master" value="mymaster"/>
        <constructor-arg name="sentinelHostAndPorts">
            <set>
                <value>${redis.sentinels.node1}</value>
                <value>${redis.sentinels.node2}</value>
                <value>${redis.sentinels.node3}</value>
            </set>
        </constructor-arg>
    </bean>

</beans>