<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans classpath:xsd/spring-beans-4.1.xsd
	http://www.springframework.org/schema/aop classpath:xsd/spring-aop-4.1.xsd
	http://www.springframework.org/schema/cache classpath:xsd/spring-cache-4.1.xsd
	http://www.springframework.org/schema/tx classpath:xsd/spring-tx-4.1.xsd
	http://www.springframework.org/schema/task classpath:xsd/spring-task-4.1.xsd 
	http://www.springframework.org/schema/context classpath:xsd/spring-context-4.1.xsd">

	<!-- 开启aspectj注解切面（@Aspect） -->
	<aop:aspectj-autoproxy />
	
	<!-- 开启@Scheduled注解的定时任务 -->
	<task:annotation-driven/>

	<!-- 使用SpringContextHolder.getBean('xxxx')的静态方法得到bean对象 -->
	<bean class="cn.evun.sweet.core.spring.SpringContext" lazy-init="false" />

	<!-- 开启注解bean自动检测并装配,注解扫描范围 （@Componen、@Service、@Controller、@Repository） -->
	<context:component-scan base-package="cn.evun.sweet.core,cn.evun.sweet.auth,cn.**.controller,cn.**.service"/>
	
	<!-- 为ContextChainToInterceptor设置类型转换配置 -->  
	<bean class="org.springframework.beans.BeanWrapperImpl">  
    	<property name="conversionService">  
    		<bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean"/>
    	</property>
	</bean> 
    
	<!-- 启用bean的${}功能 -->
	<context:property-placeholder location="classpath*:conf/*-config.properties" />

	<!-- 国际化资源 -->
	<bean id="messageSource" class="cn.evun.sweet.core.spring.CustomResourceBundleMessageSource">
		<property name="defaultBaseName" value="${core.i18n.message}" />
		<property name="basename" value="${i18n.message}" />
		<property name="useCodeAsDefaultMessage" value="true" />
	</bean>
	
	<!-- Ehcache配置 -->
	<bean id="ehcacheManagerFactory" class="cn.evun.sweet.core.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation" value="classpath:conf/ehcache.xml"/>  
    </bean>        
    <bean id="ehcacheCacheManager" class="cn.evun.sweet.core.cache.ehcache.EhCacheCacheManager">  
        <property name="cacheManager" ref="ehcacheManagerFactory"/>  
    </bean> 

	<!-- 高效序列化和反序列化框架FST实例 -->
    <bean id="fstRedisSerializer" class="cn.evun.sweet.core.cache.redis.FSTRedisSerializer"/>

    <!-- Redis配置 -->  
<!--     <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"> -->
<!--     	<constructor-arg name="redisOperations" ref="redisTemplate" /> -->
<!--     	<constructor-arg name="cacheNames"> -->
<!--             <set><value>cache_main</value><value>cache_session</value><value>cache_verifycode</value></set> -->
<!--         </constructor-arg> -->
<!--         <property name="expires"> -->
<!--             <map><entry key="cache_session" value="1800"/><entry key="cache_verifycode" value="120"/></map> -->
<!--         </property> -->
<!--     </bean> -->
<!--     <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> -->
<!-- 		<property name="connectionFactory" ref="jeidsConnectionFactory" /> -->
<!-- 		<property name="enableTransactionSupport" value="false"/> -->
<!-- 		<property name="keySerializer">   -->
<!--         	<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>   -->
<!-- 	    </property> -->
<!-- 	    <property name="hashKeySerializer">   -->
<!-- 	        <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>   -->
<!-- 	    </property> -->
<!-- 		<property name="defaultSerializer"> -->
<!-- 			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/> -->
<!-- 		</property> -->
<!-- 	</bean> -->
<!-- 	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig" -->
<!-- 	      p:maxTotal="${redis.maxTotal:64}" p:maxIdle="${redis.maxIdle:8}" p:minIdle="${redis.minIdle:0}" -->
<!-- 		  p:maxWaitMillis="${redis.maxWaitMillis:-1}" p:testOnBorrow="${redis.testOnBorrow:false}"/> -->
<!-- 	<bean id="jeidsConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"> -->
<!-- 		<constructor-arg name="sentinelConfig" ref="redisSentinelConfig" /> -->
<!-- 		<constructor-arg name="poolConfig" ref="jedisPoolConfig" /> -->
<!-- 		<property name="database" value="${redis.dbIndex}"/> -->
<!-- 		<property name="password" value="${redis.password}"/> -->
<!-- 	</bean> -->
<!--     <bean id="redisSentinelConfig" class="org.springframework.data.redis.connection.RedisSentinelConfiguration"> -->
<!--      	<constructor-arg name="master" value="mymaster" /> -->
<!--         <constructor-arg name="sentinelHostAndPorts"> -->
<!--             <set> -->
<!--                 <value>${redis.sentinels.node1}</value> -->
<!--                 <value>${redis.sentinels.node2}</value> -->
<!--                 <value>${redis.sentinels.node3}</value> -->
<!--             </set> -->
<!--         </constructor-arg> -->
<!-- 	</bean>	 -->
	<bean id="keyExpiresMessageListener" class="cn.evun.sweet.core.cache.redis.KeyExpiresMessageListener"/>
    <bean id="pushMessageListener" class="cn.evun.sweet.core.cache.redis.PushMessageListener"/>
<!--     <bean id="redisContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer" > -->
<!--         <property name="connectionFactory" ref="jeidsConnectionFactory" /> -->
<!--         <property name="taskExecutor" ref="redisTaskExecutor"/>  -->
<!--         <property name="messageListeners"> -->
<!--             <map> -->
<!--                 <entry key-ref="keyExpiresMessageListener"> -->
<!--                     <bean class="org.springframework.data.redis.listener.ChannelTopic"> -->
<!--                         <constructor-arg value="__keyevent@0__:expired" /> -->
<!--                     </bean> -->
<!--                 </entry> -->
<!--                 <entry key-ref="pushMessageListener"> -->
<!--                     <bean class="org.springframework.data.redis.listener.ChannelTopic"> -->
<!--                         <constructor-arg value="channel_push" /> -->
<!--                     </bean> -->
<!--                 </entry> -->
<!--             </map> -->
<!--         </property> -->
<!--     </bean> -->
		
	<!-- 事物管理配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 统一对业务层进行事务管理 -->
	<aop:config expose-proxy="true"> <!-- 开启暴露Aop代理到ThreadLocal支持,支持内部调用的事务 -->  
	    <aop:pointcut id="txPointcut" expression="execution(* cn..service..*.*(..))" />  
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>  
	</aop:config> 
	
	<!-- 开启注解事务机制 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 事务通知配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">  
	    <tx:attributes>        
	        <tx:method name="get*"    propagation="SUPPORTS"  read-only="true" /><!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
	        <tx:method name="count*"  propagation="SUPPORTS"  read-only="true" />
	        <tx:method name="find*"   propagation="SUPPORTS"  read-only="true" />
	        <tx:method name="query*"  propagation="SUPPORTS"  read-only="true" />
	        <tx:method name="list*"   propagation="SUPPORTS"  read-only="true" />
	        <tx:method name="*"       propagation="REQUIRED" />
	    </tx:attributes>  
	</tx:advice>  

	<!-- 数据源配置 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="password" value="${jdbc.password}" />
		<property name="username" value="${jdbc.username}" />
		<property name="initialSize" value="${jdbc.initialsize}" />
		<property name="maxIdle" value="${jdbc.maxidle}" />
		<property name="maxActive" value="${jdbc.maxactive}" />
		<property name="logAbandoned" value="${jdbc.logabandoned}" />
		<property name="removeAbandoned" value="${jdbc.removeabandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeabandonedtimeout}" />
		<property name="maxWait" value="${jdbc.maxwait}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="true"/>
		<property name="validationQuery" value="${jdbc.validationquery}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
		<property name="defaultAutoCommit" value="${jdbc.defaultAutoCommit:true}" />
	</bean>
	
	<import resource="classpath*:conf/**/*-bean.xml" />
</beans>
